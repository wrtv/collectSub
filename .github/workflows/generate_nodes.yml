name: generate_nodes

on:
  push:
    paths:
      - 'sub/sub_all_url_check.txt'
      - 'generate_nodes.py'
      - 'requirementsnodes.txt'
  workflow_dispatch:
    inputs:
      strict_dedup:
        description: '使用严格去重模式（考虑 network 和 security_method）'
        required: false
        default: 'true'
  schedule:
    - cron: '0 0,12 * * *' # 每天 UTC 00:00 和 12:00 运行

jobs:
  generate-nodes-list:
    runs-on: ubuntu-latest

    steps:
      - name: 检出仓库
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 设置 Python 环境
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 缓存虚拟环境
        uses: actions/cache@v4
        id: cache-venv
        with:
          path: venv
          key: ${{ runner.os }}-venv-${{ hashFiles('requirementsnodes.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-

      - name: 验证 requirementsnodes.txt
        run: |
          if [ ! -f requirementsnodes.txt ]; then
            echo "错误：未找到 requirementsnodes.txt 文件"
            exit 1
          fi
          while IFS= read -r line; do
            if [[ -z "$line" || "$line" =~ ^# ]]; then
                continue
            fi
            if ! echo "$line" | grep -qE '^[a-zA-Z0-9_-]+(>=|==|<|<=|~=)?[0-9.]*([a-zA-Z0-9_-]+)*$'; then
              echo "错误：requirementsnodes.txt 中格式无效：$line"
              exit 1
            fi
          done < requirementsnodes.txt
          echo "requirementsnodes.txt 验证通过"

      - name: 创建虚拟环境
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          python -m venv venv
          source venv/bin/activate
          python -m pip install --upgrade pip

      - name: 安装依赖
        run: |
          source venv/bin/activate
          pip install -r requirementsnodes.txt
        env:
          PIP_NO_CACHE_DIR: 1

      - name: 生成节点
        # ⚠️ 添加了 'set -e'，确保任何命令失败都会导致步骤立即失败
        run: |
          set -e # 任何非零退出码的命令都会导致此步骤失败
          source venv/bin/activate
          set -x # 开启调试模式，显示执行的命令
          STRICT_DEDUP=${{ github.event.inputs.strict_dedup || 'true' }}
          
          PYTHON_CMD="python generate_nodes.py --output output/all_nodes.txt"
          if [ "$STRICT_DEDUP" = "true" ]; then
            PYTHON_CMD+=" --strict_dedup"
          fi
          
          # 执行 Python 脚本，并将输出保存到日志文件，同时显示在控制台
          # 任何 Python 脚本内部的错误（如果导致非零退出）都会被 set -e 捕获
          $PYTHON_CMD 2>&1 | tee generate_nodes.log
          
          # 确保 Python 脚本运行后，output/all_nodes.txt 文件确实存在且不为空
          # 如果文件不存在或为空，则强制此步骤失败
          if [ ! -s output/all_nodes.txt ]; then
            echo "错误：generate_nodes.py 运行后未生成有效文件 output/all_nodes.txt 或文件为空！"
            exit 1
          fi
        env:
          PYTHONUNBUFFERED: 1 # 确保日志实时输出

      - name: 列出 output 目录内容 (调试用) 🔍
        # 这个步骤现在更像是确认，如果上一步成功，这里应该也能看到文件
        run: |
          echo "Listing contents of output/ directory:"
          ls -la output/
          echo "Listing contents of current directory:"
          ls -la .

      - name: 验证输出文件
        run: |
          if [ ! -f output/all_nodes.txt ]; then
            echo "错误：未找到 output/all_nodes.txt 文件"
            exit 1
          fi
          if [ ! -s output/all_nodes.txt ]; then
            echo "错误：output/all_nodes.txt 文件为空"
            exit 1
          fi
          if ! grep -qE '^(ss|ssr|vmess|vless|trojan|hysteria|hy|hy2)://' output/all_nodes.txt; then
            echo "错误：output/all_nodes.txt 不包含有效的节点 URL"
            exit 1
          fi
          LINES=$(wc -l < output/all_nodes.txt)
          echo "output/all_nodes.txt 中的节点数：$LINES"
          echo "总节点数：$LINES"
          echo "=== 节点处理统计 ==="
          grep -A 10 "=== 节点处理统计 ===" generate_nodes.log || echo "日志中未找到统计信息"

      - name: 上传工件
        uses: actions/upload-artifact@v4
        with:
          name: nodes
          path: |
            output/all_nodes.txt
            generate_nodes.log
          if-no-files-found: error

      - name: 提交并推送更改
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

          git status

          git add .

          if git diff --quiet --staged; then
            echo "无更改需要提交"
            exit 0
          fi

          TOTAL_NODES=$(wc -l output/all_nodes.txt | awk '{print $1}')
          STRICT_MODE=$([[ "${{ github.event.inputs.strict_dedup || 'true' }}" == "true" ]] && echo "严格" || echo "宽松")
          
          git commit -m "更新节点列表：$TOTAL_NODES 个节点（$STRICT_MODE 去重模式）[skip ci]"

          git pull --rebase origin main
          
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
